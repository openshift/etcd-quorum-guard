apiVersion: apps/v1
kind: Deployment
metadata:
  name: etcd-quorum-guard
  namespace: kube-system
spec:
  replicas: 3
  selector:
    matchLabels:
      name: etcd-quorum-guard
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        name: etcd-quorum-guard
        app: etcd-quorum-guard
    spec:
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - "etcd-quorum-guard"
            topologyKey: kubernetes.io/hostname
      nodeSelector:
        node-role.kubernetes.io/master: ""
      priorityClassName: "system-cluster-critical"
      tolerations:
      - key: node-role.kubernetes.io/master
        effect: NoSchedule
        operator: Exists
      - key: node.kubernetes.io/memory-pressure
        effect: NoSchedule
        operator: Exists
      - key: node.kubernetes.io/disk-pressure
        effect: NoSchedule
        operator: Exists
      - key: node.kubernetes.io/not-ready
        effect: NoExecute
        operator: Exists
      - key: node.kubernetes.io/unreachable
        effect: NoExecute
        operator: Exists
      - key: node.kubernetes.io/unschedulable
        effect: NoExecute
        operator: Exists
      containers:
      - image: registry.svc.ci.openshift.org/openshift/origin-v4.0:etcd-quorum-guard
        imagePullPolicy: IfNotPresent
        name: etcd-quorum-guard-container
        volumeMounts:
        - mountPath: /mnt/kube
          name: kubecerts
        command:
        - /bin/sh
        - -c
        - |
            trap 'kill -TERM $PID' TERM
            /bin/sleep infinity
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
                declare -r croot=/mnt/kube
                declare -r health_endpoint="https://127.0.0.1:2379/health"
                declare -r cert="$(find $croot -name 'system:etcd-peer*.crt' -print -quit)"
                declare -r key="${cert%.crt}.key"
                declare -r cacert="$croot/ca.crt"
                [[ -z $cert || -z $key ]] && exit 1
                curl --max-time 2 --silent --cert "${cert//:/\:}" --key "$key" --cacert "$cacert" "$health_endpoint" |grep '{ *"health" *: *"true" *}'
            initialDelaySecond: 5
            periodSecond: 5
        resources:
          requests:
            cpu: 10m
            memory: 5Mi
      volumes:
      - name: kubecerts
        hostPath:
          path: /etc/kubernetes/static-pod-resources/etcd-member
